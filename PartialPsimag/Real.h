#ifndef PSIMAG_Real_H
#define PSIMAG_Real_H

#include<iostream>

//
//          10        20        30        40        50        60       digit enemeration
// 1 234567890123456789012345678901234567890123456789012345678901234   digit enumeration
// 3.1415926535897932384626433832795028841971693993751058209749445923  pi
// 1.4142135623730950488016887242096980785696718753769480731766797379  sqrt(2)
// 1.7320508075688772935274463415058723669428052538103806280558069794  sqrt(3)
// 2.2360679774997896964091736687312762354406183596115257242708972454  sqrt(5)
// 2.4494897427831780981972840747058913919659474806566701284326925672  sqrt(6)
// 2.6457513110645905905016157536392604257102591830824501803683344592  sqrt(7)
// 2.8284271247461900976033774484193961571393437507538961463533594759  srqt(8)
// 3.1622776601683793319988935444327185337195551393252168268575048527  sqrt(10)
// 3.3166247903553998491149327366706866839270885455893535970586821461  sqrt(11)
// 3.6055512754639892931192212674704959462512965738452462127104530562  sqrt(13)
// 4.1231056256176605498214098559740770251471992253736204343986335730  sqrt(17)
// 4.3588989435406735522369819838596156591370039252324449368903441381  sqrt(19)

/** \file Real.h
 *  \author Thomas C. Schulthess
 *  \brief typedefs and macros for floating-point numbers
 *
 *  \warning The implementation of psimag supports only double literals.
 *  This means that defining Real to be long double precision may result in 
 *  degrading to double precision. No long double literals are supported at
 *  this point. -- see ISO-C++ standard 14882:1998(E), page 18.
 *
 *  \warning defining Real to be float will not degrade the intended precision.
 *
 *  \warning The current literals assume SINGLE_PRECISION is 32-bit, otherwise
 *  constants are given to 64-bit accuracy.
 */

/** \namespace psimag
 */
namespace  psimag {

/** \def SINGLE_PRECISION
 *  \brief To force single precision, else double precision is used
 */

/** \def PI
 *  \brief A literal expression for the ratio of perimeter to diameter
 */

#ifdef SINGLE_PRECISION

typedef float Real;

#undef PI
#define PI 3.14159265358979323846F

#undef SQRT2
#define SQRT2 1.41421356237309504880F
#define SQRT3 1.7320508075688772935274463415058723669428052538103806280558069794F
#define SQRT5 2.2360679774997896964091736687312762354406183596115257242708972454F
#define SQRT6 2.4494897427831780981972840747058913919659474806566701284326925672F
#define SQRT7 2.6457513110645905905016157536392604257102591830824501803683344592F
#define SQRT8 2.8284271247461900976033774484193961571393437507538961463533594759F
#define SQRT10 3.1622776601683793319988935444327185337195551393252168268575048527F
#define SQRT11 3.3166247903553998491149327366706866839270885455893535970586821461F
#define SQRT13 3.6055512754639892931192212674704959462512965738452462127104530562F
#define SQRT17 4.1231056256176605498214098559740770251471992253736204343986335730F
#define SQRT19 4.3588989435406735522369819838596156591370039252324449368903441381F

//##endif 
//##ifndef SINGLE_PRECISION
#else

typedef double Real;

#undef PI
#define PI 3.141592653589793238462643383279502884197

#undef SQRT2
#define SQRT2 1.414213562373095048801688724209698078569
#define SQRT3 1.732050807568877293527446341505872366942
#define SQRT5 2.236067977499789696409173668731276235440
#define SQRT6 2.449489742783178098197284074705891391965
#define SQRT7 2.645751311064590590501615753639260425710
#define SQRT8 2.828427124746190097603377448419396157139
#define SQRT10 3.162277660168379331998893544432718533719
#define SQRT11 3.316624790355399849114932736670686683927
#define SQRT13 3.605551275463989293119221267470495946251
#define SQRT17 4.123105625617660549821409855974077025147
#define SQRT19 4.358898943540673552236981983859615659137

#endif // SINGLE_PRECISION 


void PrintRealDetails(std::ostream& output);


} /* namespace psimag */

#endif /* PSIMAG_Real_H */
